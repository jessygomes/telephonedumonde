// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  admin
  user
  organizer
}

model User {
  id                     String                 @id @default(cuid())
  email                  String?                @unique
  emailVerified          DateTime?
  name                   String?
  firstName              String?
  lastName               String?
  addresses              Address[]
  password               String?
  role                   Role                   @default(user)
  image                  String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @default(now())
  wishlist               UserWishlist[]
  accounts               Account[]
  isTwofactorEnabled     Boolean?               @default(false)
  twoFactoFrConfirmation TwoFactorConfirmation?
  isVerified             Boolean                @default(false)

  Order                  Order[]

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserWishlist {
  userId    String
  eventId   String
  variantId String
  createdAt DateTime @default(now())
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Variant   PhoneVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([userId, eventId, variantId])
  @@map("user_wishlist")
}

model PhoneModel {
  id          String        @id @default(cuid())
  name        String
  brand       String
  isActive    Boolean       @default(true)
  variants    PhoneVariant[]
}

model PhoneVariant {
  id            String        @id @default(cuid())
  modelId       String
  model         PhoneModel    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  memory        Int
  color         String
  countryId     String
  country       Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  price         Float
  description   String
  caract        String?
  stock         Int?           @default(0)
  isActive      Boolean       @default(true)
  images        PhoneImage[]
  userWishlists UserWishlist[]
  orderItems    OrderItem[]
  Order         Order[]

  @@unique([modelId, memory, color, countryId])
}

model PhoneImage {
  id          String      @id @default(cuid())
  variantId   String
  url         String
  description String?
  PhoneVariant PhoneVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("phone_image")
}

model Country {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String?
  phoneVariants PhoneVariant[]

  @@map("country")
}

model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  userId            String?
  addressId         String?
  variantId         String
  quantity          Int
  stripeSessionId   String?       // ID de la session de paiement Stripe
  paymentStatus     String        // Statut du paiement (e.g., 'pending', 'paid', 'failed')
  promoCodeId       String?
  statut            String        // Statut de la commande (e.g., 'pending', 'processing', 'shipped', 'delivered')
  items             OrderItem[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  User              User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Address           Address?      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  Variant           PhoneVariant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  PromoCode         PromoCode?    @relation(fields: [promoCodeId], references: [id])

  // Champs pour les commandes sans compte
  contactEmail      String?
  contactPhone      String?
  shippingAddress   Json?         // Utilisation du type JSON pour stocker l'adresse de livraison

  @@map("order")
}

model OrderItem {
  id        String       @id @default(cuid())
  orderId   String
  variantId String
  quantity  Int
  price     Float
  Order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Variant   PhoneVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("order_item")
}

model Address {
  id           String   @id @default(cuid())
  street       String
  city         String
  state        String
  postalCode   String
  country      String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model PromoCode {
  id          String   @id @default(cuid()) // ID du code promo
  code        String   @unique // Code du code promo
  discount    Float    // Le pourrcentage de réduction appliqué par le code promo
  expiresAt   DateTime  // Date d'expiration du code promo
  isActive    Boolean  @default(true) // Indique si le code promo est actif
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]

  @@map("promo_code")
}

model CarouselImageHome {
  id          String   @id @default(cuid())
  imageUrl    String   // URL de l'image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true) // Indique si l'image est active

  @@map("carousel_image")
}